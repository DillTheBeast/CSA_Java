Answer 1:
B because != will be true since you are comparing 2 Strings

Answer 2:
A because the second if statement will also be true, changing the value

Answer 3:
public class Combinatorics {

    public static int factorial(int n) {
        if (n == 1) {
            return 1; // Base case: factorial of 1 is 1
        } else {
            return n * factorial(n - 1); // Recursive case: n * (n-1)!
        }
    }

    public static void numCombinations(int n, int r) {
        if (r > n) {
            System.out.println("There are 0 ways of choosing " + r + " items from " + n + " choices.");
        } else {
            int combinations = factorial(n) / (factorial(r) * factorial(n - r));
            System.out.println("There are " + combinations + " ways of choosing " + r + " items from " + n + " choices.");
        }
    }

    public static void main(String[] args) {
        numCombinations(2, 4); // Output: There are 0 ways of choosing 4 items from 2 choices.
        numCombinations(5, 3); // Output: There are 10 ways of choosing 3 items from 5 choices.
    }
}

Answer 4:
B

Answer 5:
C

Answer 6:
B

Answer 7:
Any number % 2 = 0
Number 1 works
Number 2 works because NONE will never print
Number 3 would work if it was !test not test
D

Answer 8:
C

Answer 9:
E

Answer 10:
dog = a is less than b OR c does not equal d
D

Answer 11:
b1 = true and false = false
b

Answer 12:
x = 3
y = -1
1 is greater than -1
3 + 1 = 4
x = 4
2 is not greater than or equal to 4
y = -1
D

Answer 13:
A because 1900 is a multiple of 4 but is also a multiple of 100 and is not a multiple of 400

Answer 14:
C because false && true || false is false but true || true && false is true so Third only gets printed

Answer 15:
4 is less than 5 and true
5 is greater than 0
start = 6
end = 6
6 is not less than 6
B

Answer 16:
7 is greater than 4
3 is greater than or equal to 3
a = true
x = 3
3 is less than 4
1 is not greater than or equal to 3
x = 7
C

Answer 17:
a = 10
b = 10
D

Answer 18:
public static void determineRelationship(Kid one, Kid two) {
    if (one == two) {
        System.out.println("Same kid");
    } else {
        Parent parentOne = one.getParent();
        Parent parentTwo = two.getParent();
        
        if (parentOne.equals(parentTwo)) {
            System.out.println("Same parent");
        } else {
            System.out.println("Unrelated");
        }
    }
}

Answer 19:
school = closed when >= 95
C

Answer 20:
7 is not < 7
7 mod 3 = 1
x = 9
9 x 3 = 27
E

Answer 21:
finalPrice = 100
onClearance is true
finalPrice - 25 = 75
hasCoupon is not true
D

Answer 22:
public int spin(int min, int max) {
    Random random = new Random();
    int result = random.nextInt((max - min) + 1) + min;
    return result;
}

public void playRound() {
    winner = false
    attempts = 0
    int playerScore;
    int computerScore;
    int oldPlayerScore;
    int oldComputerScore;
    int diff;
    while(!winner || attempts < 2) {
        if (attempts == 1) {
            oldPlayerScore = playerScore
            oldComputerScore = computerScore
        }
        playerScore = spin(1, 10);
        computerScore = spin(2, 8);
        diff = playerScore - computerScore;
        if(computerScore > playerScore) System.out.println("You lose. " + diff + " points");
        else if(computerScore < playerScore) System.out.println("You win. " + diff + " points");
        else attempts += 1
    }
    if (!winner) {
        totalPlayerScore = playerScore + oldPlayerScore
        totalComputerScore = computerScore + oldComputerScore
        diff = totalPlayerScore - totalComputerScore;
        if (totalPlayerScore > totalComputerScore) System.out.println("You win. " + diff + " points");
        else if (totalComputerScore > totalPlayerScore) System.out.println("You lose. " + diff + " points");
        else System.out.println("Tie. " + diff + " points");
    }
}

Answer 23:
E

Answer 24:
C